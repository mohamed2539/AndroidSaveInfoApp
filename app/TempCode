//setOnItemClickListener
    listViewItems.set((parent, view, position, id) -> {
        // Get the selected item
        String selectedItem = itemsList.get(position);
        String[] parts = selectedItem.split(" - ");
        String currentClassName = parts[0];
        int currentQuantity = Integer.parseInt(parts[1]);

        // Create a dialog for updating the item
        AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);
        View dialogView = getLayoutInflater().inflate(R.layout.update_dialog, null);

        EditText editClassName = dialogView.findViewById(R.id.editTextUpdateClassName);
        EditText editQuantity = dialogView.findViewById(R.id.editTextUpdateQuantity);
        Button btnUpdate = dialogView.findViewById(R.id.buttonUpdate);

        // Set current values
        editClassName.setText(currentClassName);
        editQuantity.setText(String.valueOf(currentQuantity));

        builder.setView(dialogView);
        AlertDialog dialog = builder.create();

        btnUpdate.setOnClickListener(v -> {
            String newClassName = editClassName.getText().toString().trim();
            String newQuantity = editQuantity.getText().toString().trim();

            if (!newClassName.isEmpty() && !newQuantity.isEmpty()) {
                try {
                    int itemId = (int) id; // Convert ID to integer
                    updateItem(newClassName, newQuantity, itemId);
                    dialog.dismiss(); // Close the dialog after update
                } catch (NumberFormatException e) {
                    Toast.makeText(MainActivity.this, "يرجى إدخال عدد صحيح", Toast.LENGTH_SHORT).show();
                }
            } else {
                Toast.makeText(MainActivity.this, "يرجى إدخال جميع البيانات", Toast.LENGTH_SHORT).show();
            }
        });

        dialog.show();
    });











    listViewItems.setOnItemLongClickListener((parent, view, position, id) -> {
        int itemId = (int) id; // Convert ID to integer

        // Show confirmation dialog before deletion
        new AlertDialog.Builder(MainActivity.this)
                .setTitle("تأكيد المسح")
                .setMessage("هل أنت متأكد من أنك تريد مسح هذا الصنف؟")
                .setPositiveButton("نعم", (dialog, which) -> {
                    if (dbHelper.deleteItem(itemId)) {
                        Toast.makeText(MainActivity.this, "تم المسح بنجاح", Toast.LENGTH_SHORT).show();
                        loadItemsFromDatabase(); // Reload data after deletion
                    } else {
                        Toast.makeText(MainActivity.this, "فشل المسح", Toast.LENGTH_SHORT).show();
                    }
                })
                .setNegativeButton("لا", null)
                .show();

        return true;
    });



    // Add a button to clear all items

buttonClearAll.setOnClickListener(v -> {
        new AlertDialog.Builder(MainActivity.this)
                .setTitle("تأكيد المسح")
                .setMessage("هل أنت متأكد من أنك تريد مسح جميع الصنوف؟")
                .setPositiveButton("نعم", (dialog, which) -> {
                    dbHelper.clearAllItems();
                    itemsList.clear();
                    adapter.notifyDataSetChanged();
                    Toast.makeText(MainActivity.this, "تم مسح جميع الصنوف", Toast.LENGTH_SHORT).show();
                })
                .setNegativeButton("لا", null)
                .show();
    });







================================================================
package com.example.inventoryapp;

import android.database.Cursor;
import android.os.Bundle;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.databinding.DataBindingUtil;

import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.Toast;

import com.example.inventoryapp.databinding.ActivityMainBinding;
import com.example.inventoryapp.DatabaseHelper;

import java.util.ArrayList;

public class MainActivity extends AppCompatActivity {

    private ActivityMainBinding binding; // Data Binding
    private DatabaseHelper dbHelper;

    private ArrayList<String> itemsList;
    private ArrayAdapter<String> adapter;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        // Enable Data Binding
        binding = DataBindingUtil.setContentView(this, R.layout.activity_main);

        // Initialize List and Adapter
        itemsList = new ArrayList<>();
        adapter = new ArrayAdapter<>(this, android.R.layout.simple_list_item_1, itemsList);
        binding.listViewItems.setAdapter(adapter);

        // Initialize Database Helper
        dbHelper = new DatabaseHelper(this);

        // Load saved data from database
        loadItemsFromDatabase();

        // Save Button Listener
        binding.buttonSave.setOnClickListener(v -> saveItemToDatabase());

        // Update Button Listener
        binding.buttonUpdate.setOnClickListener(v -> {
            if (binding.listViewItems.getCheckedItemPosition() != ListView.INVALID_POSITION) {
                int position = binding.listViewItems.getCheckedItemPosition();
                String selectedItem = itemsList.get(position);
                String[] parts = selectedItem.split(" - ");
                String currentClassName = parts[0];
                int currentQuantity = Integer.parseInt(parts[1]);

                // Create a dialog for updating the item
                AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);
                View dialogView = getLayoutInflater().inflate(R.layout.update_dialog, null);

                EditText editClassName = dialogView.findViewById(R.id.editTextUpdateClassName);
                EditText editQuantity = dialogView.findViewById(R.id.editTextUpdateQuantity);
                Button btnUpdate = dialogView.findViewById(R.id.buttonUpdate);

                // Set current values
                editClassName.setText(currentClassName);
                editQuantity.setText(String.valueOf(currentQuantity));

                builder.setView(dialogView);
                AlertDialog dialog = builder.create();

                btnUpdate.setOnClickListener(innerV -> {
                    String newClassName = editClassName.getText().toString().trim();
                    String newQuantity = editQuantity.getText().toString().trim();

                    if (!newClassName.isEmpty() && !newQuantity.isEmpty()) {
                        try {
                            String[] idParts = selectedItem.split(" - ");
                            int itemId = Integer.parseInt(idParts[0]);
                            updateItem(newClassName, newQuantity, itemId);
                            dialog.dismiss();
                        } catch (NumberFormatException e) {
                            Toast.makeText(MainActivity.this, "حدث خطأ أثناء التعديل", Toast.LENGTH_SHORT).show();
                        }
                    } else {
                        Toast.makeText(MainActivity.this, "يرجى إدخال جميع البيانات", Toast.LENGTH_SHORT).show();
                    }
                });

                dialog.show();
            } else {
                Toast.makeText(MainActivity.this, "اختر عنصرًا لتعدíله", Toast.LENGTH_SHORT).show();
            }
        });

        // Clear All Button Listener
        binding.buttonClearAll.setOnClickListener(v -> {
            new AlertDialog.Builder(MainActivity.this)
                .setTitle("تأكيد المسح")
                .setMessage("هل أنت متأكد من أنك تريد مسح جميع الصنوف؟")
                .setPositiveButton("نعم", (dialog, which) -> {
                    dbHelper.clearAllItems();
                    itemsList.clear();
                    adapter.notifyDataSetChanged();
                    Toast.makeText(MainActivity.this, "تم مسح جميع الصنوف", Toast.LENGTH_SHORT).show();
                })
                .setNegativeButton("لا", null)
                .show();
        });

        // Long Click Listener for Deleting Items
        binding.listViewItems.setOnItemLongClickListener((parent, view, position, id) -> {
            int itemId = (int) id;

            // Show confirmation dialog before deletion
            new AlertDialog.Builder(MainActivity.this)
                .setTitle("تأكيد المسح")
                .setMessage("هل أنت متأكد من أنك تريد مسح هذا الصنف؟")
                .setPositiveButton("نعم", (dialog, which) -> {
                    if (dbHelper.deleteItem(itemId)) {
                        Toast.makeText(MainActivity.this, "تم المسح بنجاح", Toast.LENGTH_SHORT).show();
                        loadItemsFromDatabase();
                    } else {
                        Toast.makeText(MainActivity.this, "فشل المسح", Toast.LENGTH_SHORT).show();
                    }
                })
                .setNegativeButton("لا", null)
                .show();

            return true;
        });
    }

    /**
     * Method to Save Item to Database
     */
    private void saveItemToDatabase() {
        String className = binding.editTextClassName.getText().toString().trim();
        String quantityStr = binding.editTextQuantity.getText().toString().trim();

        if (!className.isEmpty() && !quantityStr.isEmpty()) {
            try {
                int quantity = Integer.parseInt(quantityStr);
                boolean isInserted = dbHelper.insertItem(className, quantityStr);

                if (isInserted) {
                    Toast.makeText(this, "تم الحفظ بنجاح", Toast.LENGTH_SHORT).show();
                    loadItemsFromDatabase();
                } else {
                    Toast.makeText(this, "فشل الحفظ", Toast.LENGTH_SHORT).show();
                }
            } catch (NumberFormatException e) {
                Toast.makeText(this, "يرجى إدخال عدد صحيح", Toast.LENGTH_SHORT).show();
            }
        } else {
            Toast.makeText(this, "يرجى إدخال جميع البيانات", Toast.LENGTH_SHORT).show();
        }

        // Clear input fields
        binding.editTextClassName.setText("");
        binding.editTextQuantity.setText("");
    }

    /**
     * Method to Load Items from Database
     */
    private void loadItemsFromDatabase() {
        Cursor cursor = dbHelper.getAllItems();
        itemsList.clear();

        if (cursor != null && cursor.moveToFirst()) {
            do {
                try {
                    String className = cursor.getString(cursor.getColumnIndexOrThrow(DatabaseHelper.COLUMN_CLASS_NAME));
                    int quantity = cursor.getInt(cursor.getColumnIndexOrThrow(DatabaseHelper.COLUMN_QUANTITY));
                    itemsList.add(className + " - " + quantity);
                } catch (IllegalArgumentException e) {
                    System.err.println("Error: Missing column in database");
                }
            } while (cursor.moveToNext());

            cursor.close();
        }

        adapter.notifyDataSetChanged();
    }

    /**
     * Method to Update an Item in the Database
     */
    private void updateItem(String className, String quantity, int id) {
        SQLiteDatabase db = dbHelper.getWritableDatabase();
        ContentValues values = new ContentValues();
        values.put(DatabaseHelper.COLUMN_CLASS_NAME, className);
        values.put(DatabaseHelper.COLUMN_QUANTITY, Integer.parseInt(quantity));

        long result = db.update(DatabaseHelper.TABLE_ITEMS, values, DatabaseHelper.COLUMN_ID + " = ?", new String[]{String.valueOf(id)});
        if (result != -1) {
            Toast.makeText(this, "تم التعديل بنجاح", Toast.LENGTH_SHORT).show();
            loadItemsFromDatabase();
        } else {
            Toast.makeText(this, "فشل التعديل", Toast.LENGTH_SHORT).show();
        }
    }
}





